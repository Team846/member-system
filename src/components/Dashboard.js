import * as PropTypes from 'prop-types';
import {ActiveUser, hasPermissionLevel, routes} from "../settings";
import {AppBar, Drawer, IconButton, List, ListItem, ListItemText, Toolbar, Typography} from '@material-ui/core';
import React, {Fragment, useContext, useState} from 'react';
import {Menu} from "@material-ui/icons";
import {withStyles} from '@material-ui/core/styles';
import {withRouter} from "react-router-dom";

/**
 * Wraps a page that an authenticated user will have access to
 * @param children The main content of this page (will be shown under the app bar)
 * @param classes The classes generated by the styling solution
 * @param history The history object passed on by the router
 * @param title The title of this page as seen by the user
 * @returns {React.FC}
 * @constructor
 */
function Dashboard({children, classes, history, title}) {
    const [drawerIsOpen, setDrawerIsOpen] = useState(false);
    const activeUser = useContext(ActiveUser);
    return (
        <Fragment>
            <AppBar>
                <Toolbar className={classes.toolbar}>
                    <IconButton className={classes.menuButton} color="inherit" onClick={() => {
                        setDrawerIsOpen(true);
                    }}>
                        <Menu/>
                    </IconButton>
                    <Typography color="inherit" component="h1" variant="h5">{title}</Typography>
                </Toolbar>
            </AppBar>
            <Drawer classes={{paper: classes.drawerPaper}} onClose={() => {
                setDrawerIsOpen(false);
            }} open={drawerIsOpen}
                    variant="temporary">
                <List>
                    <ListItem>
                        <ListItemText>
                            <Typography variant="h5">Member System</Typography>
                        </ListItemText>
                    </ListItem>
                    {Object.values(routes.private)
                        .map(route =>
                            hasPermissionLevel(route.minPermissionLevel || "Standard")(activeUser) && route.hidden !== true
                                ? (
                                    <ListItem button key={route.path}
                                              onClick={() => {
                                                  history.push(route.path)
                                              }}>
                                        <ListItemText>{route.label}</ListItemText>
                                    </ListItem>)
                                : null)}
                </List>
            </Drawer>
            <div className={classes.contentSpacer}/>
            {children}
        </Fragment>
    )
}

Dashboard.propTypes = {
    children: PropTypes.any,
    classes: PropTypes.object.isRequired,
    history: PropTypes.object.isRequired,
    title: PropTypes.string.isRequired
};

Dashboard.styles = theme => ({
    contentSpacer: {
        ...theme.mixins.toolbar
    },
    drawerPaper: {
        width: 300
    },
    menuButton: {
        marginLeft: -12,
        marginRight: theme.spacing(1)
    },
    toolbar: {
        alignItems: "center",
        display: "flex"
    }
});

export default withStyles(Dashboard.styles)(withRouter(Dashboard));
